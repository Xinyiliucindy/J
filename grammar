// A grammar for j--, suitable for parsing by recursive descent
// Copyright 2013 Bill Campbell, Swami Iyer and Bahar Akbal-Delibas

compilationUnit ::= [PACKAGE qualifiedIdentifier SEMI]
                    {IMPORT  qualifiedIdentifier SEMI}
                    {typeDeclaration} EOF 

qualifiedIdentifier ::= IDENTIFIER {DOT IDENTIFIER}

typeDeclaration ::= modifiers classDeclaration

modifiers ::= {PUBLIC | PROTECTED | PRIVATE | STATIC | ABSTRACT}

classDeclaration ::= CLASS IDENTIFIER 
                       [EXTENDS qualifiedIdentifier] 
                       classBody

classBody ::= LCURLY {modifiers memberDecl} RCURLY

memberDecl ::= IDENTIFIER            // constructor
                 formalParameters block
             | (VOID | type) IDENTIFIER  // method
                 formalParameters
                 (block | SEMI)
             | type variableDeclarators SEMI // field

block ::= LCURLY {blockStatement} RCURLY 

blockStatement ::= localVariableDeclarationStatement
                 | statement

statement ::= block
            | IF parExpression statement [ELSE statement]
            | WHILE parExpression statement 
            | RETURN [expression] SEMI
            | SEMI 
            | statementExpression SEMI

formalParameters ::= LPAREN 
                       [formalParameter {COMMA formalParameter}]
                     RPAREN

formalParameter ::= type IDENTIFIER

parExpression ::= LPAREN expression RPAREN

localVariableDeclarationStatement ::= type variableDeclarators SEMI

variableDeclarators ::= variableDeclarator {COMMA variableDeclarator}

variableDeclarator ::= IDENTIFIER [ASSIGN variableInitializer]
                    
variableInitializer ::= arrayInitializer | expression

arrayInitializer ::= LCURLY 
                       [variableInitializer
                         {COMMA variableInitializer} [COMMA]]
                     RCURLY 

arguments ::= LPAREN [expression {COMMA expression}] RPAREN

type ::= referenceType | basicType


// step 1
basicType ::= BOOLEAN | CHAR | INT | BYTE | SHORT | LONG | DOUBLE | FLOAT 

referenceType ::= basicType LBRACK RBRACK {LBRACK RBRACK}
                | qualifiedIdentifier {LBRACK RBRACK}

statementExpression ::= expression // but must have side-effect, eg i++

expression ::= assignmentExpression

assignmentExpression ::= conditionalAndExpression  // must be a valid lhs
                           [(ASSIGN | PLUS_ASSIGN | USR_ASSIGN
                            | STAR_ASSIGN | MINUS_ASSIGN | AND_ASSIGN
                            | DIV_ASSIGN | REM_ASSIGN | USR_ASSIGN
                            | SSL_ASSIGN | SSR_ASSIGN
                            | BITXOR_ASSIGN | BITWISE_OR_ASSIGN) assignmentExpression]

conditionalAndExpression ::= bitXorExpression  // level 10
                               {LAND bitXorExpression}

// yaoyao: added level 8
bitXorExpression ::= equalityExpression //level 8
                          {BITXOR equalityExpression}

// gengxingguang: added level 7
bitwiseOrExpression  ::= equalityExpression//level 7
                            {BITWISE_OR equalityExpression}

equalityExpression ::= relationalExpression  // level 6
                         {EQUAL relationalExpression}

relationalExpression ::= binaryshiftExpression       // level 5
                           [(GT | LE) binaryshiftExpression
                           | INSTANCEOF referenceType]
                           
// xinyi: added level 4
binaryshiftExpression ::= additiveExpression    // level 4
                          {(SSLEFT | SSRIGHT | USRIGHT)  additiveExpression}

additiveExpression ::= multiplicativeExpression // level 3
                         {(PLUS | MINUS) multiplicativeExpression}

multiplicativeExpression ::= unaryExpression       // level 2
                               {(STAR | DIV | REM) unaryExpression}  // xinyi: DIV, REM

unaryExpression ::= INC unaryExpression  // level 1
                  | MINUS unaryExpression
                  | PLUS unaryExpression            // zhidie: unary plus +
                  | COMPLEMENT  unaryExpression     // gengxingguang: complement ~
                  | simpleUnaryExpression

simpleUnaryExpression ::= LNOT unaryExpression
                        | LPAREN basicType RPAREN unaryExpression //casted
                        | LPAREN // casted               
                            referenceType
                          RPAREN simpleUnaryExpression
                        | postfixExpression 

postfixExpression ::= primary {selector} {DEC}

selector ::= DOT qualifiedIdentifier [arguments]
           | LBRACK expression RBRACK

primary ::= parExpression
          | THIS [arguments]
          | SUPER ( arguments 
                  | DOT IDENTIFIER [arguments] 
                  )
          | literal
          | NEW creator
          | qualifiedIdentifier [arguments]

creator ::= (basicType | qualifiedIdentifier) 
              ( arguments
              | LBRACK RBRACK {LBRACK RBRACK} [arrayInitializer]
              | newArrayDeclarator
              )

newArrayDeclarator ::= LBRACK expression RBRACK 
                         {LBRACK expression RBRACK} {LBRACK RBRACK}

literal ::= INT_LITERAL | CHAR_LITERAL | STRING_LITERAL
          | TRUE        | FALSE        | NULL
