// A grammar for j--, suitable for parsing by recursive descent
// Copyright 2013 Bill Campbell, Swami Iyer and Bahar Akbal-Delibas

compilationUnit ::= [PACKAGE qualifiedIdentifier SEMI]
                    {IMPORT  qualifiedIdentifier SEMI}
                    {typeDeclaration} EOF 

qualifiedIdentifier ::= IDENTIFIER {DOT IDENTIFIER}

typeDeclaration ::= typeDeclarationModifier (classDeclaration | interfaceDeclaration) | SEMI            // step 2

typeDeclarationModifier ::= {PUBLIC | PROTECTED | PRIVATE | STATIC | ABSTRACT | FINAL | STRICTFP }      // step 2  

classDeclaration ::= CLASS IDENTIFIER [EXTENDS qualifiedIdentifier]                                     // step 2  
                      [IMPLEMENTS qualifiedIdentifier {COMMA qualifiedIdentifier}]
                       classBody

classBody ::= LCURLY { SEMI | STATIC block
                      | block | modifiers memberDecl} RCURLY

interfaceDeclaration ::= INTERFACE IDENTIFIER  // can't be final                                        // step 2              
                         [EXTENDS qualifiedIdentifier {COMMA qualifiedIdentifier}]
                         interfaceBody 

interfaceBody ::= LCURLY { SEMI | modifier interfaceMemberDecl } RCURLY                                 // step 2

interfaceMemberDecl ::= classDeclaration  // inner class                                                // step 2
                       | interfaceDeclaration  // inner interface
                       | (VOID | type) <identifier>   // method
                          formalParameters { LBRACK RBRACK } [THROWS qualifiedIdentifier {COMMA qualifiedIdentifier}] SEMI
                       | type variableDeclarators SEMI   // fields; must have inits

modifiers ::= {PUBLIC | PROTECTED | PRIVATE | STATIC | ABSTRACT}                                        // step 2

memberDecl ::= classDeclaration       // inner class
             | interfaceDeclaration   // inner interface
                IDENTIFIER            // constructor
                 formalParameters block
             | (VOID | type) IDENTIFIER  // method
                 formalParameters
                 (block | SEMI)
             | type variableDeclarators SEMI // field

block ::= LCURLY {blockStatement} RCURLY 

blockStatement ::= localVariableDeclarationStatement
                 | statement

statement ::= block
            | IF parExpression statement [ELSE statement]
            | WHILE parExpression statement 
            | RETURN [expression] SEMI
            | SEMI 
            | statementExpression SEMI

formalParameters ::= LPAREN 
                       [formalParameter {COMMA formalParameter}]
                     RPAREN

formalParameter ::= type IDENTIFIER

parExpression ::= LPAREN expression RPAREN

localVariableDeclarationStatement ::= type variableDeclarators SEMI

variableDeclarators ::= variableDeclarator {COMMA variableDeclarator}

variableDeclarator ::= IDENTIFIER [ASSIGN variableInitializer]
                    
variableInitializer ::= arrayInitializer | expression

arrayInitializer ::= LCURLY 
                       [variableInitializer
                         {COMMA variableInitializer} [COMMA]]
                     RCURLY 

arguments ::= LPAREN [expression {COMMA expression}] RPAREN

type ::= referenceType | basicType


// step 1
basicType ::= BOOLEAN | CHAR | INT | BYTE | SHORT | LONG | DOUBLE | FLOAT 

referenceType ::= basicType LBRACK RBRACK {LBRACK RBRACK}
                | qualifiedIdentifier {LBRACK RBRACK}

statementExpression ::= expression // but must have side-effect, eg i++

expression ::= assignmentExpression

// level 13 
assignmentExpression ::= conditionalExpression  // must be a valid lhs
                           [(ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN                            
                            | STAR_ASSIGN | DIV_ASSIGN | REM_ASSIGN                       
                            | SSL_ASSIGN | SSR_ASSIGN | USR_ASSIGN
                            | AND_ASSIGN | BITXOR_ASSIGN | BITWISE_OR_ASSIGN) assignmentExpression]

// level 12
conditionalExpression ::= conditionalOrExpression
                          [ QUESTION assignmentExpression : conditionalExpression]

//level 11
conditionalOrExpression ::= conditionalAndExpression 
                          { LOGICAL_OR conditionalAndExpression}

// level 10
conditionalAndExpression ::= bitwiseOrExpression
                          { LAND bitwiseOrExpression}

// level 9
// gengxingguang: added level 9
bitwiseOrExpression  ::= bitXorExpression
                            { BITWISE_OR bitXorExpression}

// level 8
// yaoyao: added level 8
bitXorExpression ::= andExpression
                          { BITXOR andExpression}

// level 7
// zoe: add level 7
andExpression ::= equalityExpression
                          { AND equalityExpression}

// level 6
equalityExpression ::= relationalExpression  
                         { EQUAL relationalExpression}


// level 5
relationalExpression ::= binaryshiftExpression
                           [(GT | LE) binaryshiftExpression
                           | INSTANCEOF referenceType]

// level 4               
// xinyi: added level 4
binaryshiftExpression ::= additiveExpression
                          {(SSLEFT | SSRIGHT | USRIGHT)  additiveExpression}

// level 3
additiveExpression ::= multiplicativeExpression
                         {(PLUS | MINUS) multiplicativeExpression}

// level 2
multiplicativeExpression ::= unaryExpression
                               {(STAR | DIV | REM) unaryExpression}

// level 1
unaryExpression ::= INC unaryExpression
                  | MINUS unaryExpression
                  | PLUS unaryExpression
                  | COMPLEMENT  unaryExpression
                  | simpleUnaryExpression

simpleUnaryExpression ::= LNOT unaryExpression
                        | LPAREN basicType RPAREN unaryExpression //casted
                        | LPAREN // casted               
                            referenceType
                          RPAREN simpleUnaryExpression
                        | postfixExpression 

postfixExpression ::= primary {selector} {DEC}

selector ::= DOT qualifiedIdentifier [arguments]
           | LBRACK expression RBRACK

primary ::= parExpression
          | THIS [arguments]
          | SUPER ( arguments 
                  | DOT IDENTIFIER [arguments] 
                  )
          | literal
          | NEW creator
          | qualifiedIdentifier [arguments]

creator ::= (basicType | qualifiedIdentifier) 
              ( arguments
              | LBRACK RBRACK {LBRACK RBRACK} [arrayInitializer]
              | newArrayDeclarator
              )

newArrayDeclarator ::= LBRACK expression RBRACK 
                         {LBRACK expression RBRACK} {LBRACK RBRACK}

literal ::= INT_LITERAL | CHAR_LITERAL | STRING_LITERAL
          | TRUE        | FALSE        | NULL


// 3.10  all levels adding finish